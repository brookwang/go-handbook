# Go的类型系统总结- Go的结构体类型，类似于java的class，但Go中的结构体是不能定义方法的，
只能是变量，这点和Java不一样的，如果要访问结构体内的成员变量，通过.操作符即可；
- Go的方法func是给struct添加的新行为，定义方式是在func和方法名之间增加一个参数；而Java的方法定义在class内部；
- Go可以对包中的 任意 类型定义任意方法，而不仅仅是针对结构体，但不能对来自其他包的类型或基础类型定义方法；
- Go中，函数和方法是不一样的，我们一般称包级别的(直接可以通过包调用的)称之为函数，比如fmt.Println()；把和一个类型关联起来的函数称之为方法，关联类型的函数，只能声明了类型的实例后才可以调用，称之为方法。
- 在func关键字后要执行该方法的接收者，这个方法就是属于这个接收者，接收者分为值接收者和指针接收者，需要使用指针接收者的有两个场景，首先避免在每个方法调用中拷贝值（如果值类型是大的结构体的话会更有效率）；其次，方法可以修改接收者指向的值。- Go的func支持多值返回。如果有个返回值，我们用不到，不想浪费一个变量接收怎么办？这时候可以使用空标志符_，这是JAVA不支持的。
- Go的指针和C中的声明定义是一样的，此处不赘述，其作用类似于Java引用变量效果。
- Go使用嵌入结构体实现类似于Java的继承功能，但这属于一种组合的方式，我们可以把简单的对象组合成复杂的对象，并且他们之间没有强约束关系，Go倡导的是组合，而不是继承、多态。
- Go的接口和Java类似，不过它不需要强制实现，在Go中，如果你这个类型（基本类型，结构体等都可以）拥有了接口的所有方法，那么就默认为这个类型实现了这个接口，是隐式的，不需要和java一样，强制使用implement强制实现。这种隐式接口方式，解藕了实现接口的包和定义接口的包：互不依赖。

